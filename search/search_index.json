{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DevOps CookBook Hello! This is the website to help you to deep dive into DevOps stuff and work with it. Fill free to share you ideas with @OuFinx or @VolodymyrSmahliuk","title":"DevOps CookBook"},{"location":"#devops-cookbook","text":"Hello! This is the website to help you to deep dive into DevOps stuff and work with it. Fill free to share you ideas with @OuFinx or @VolodymyrSmahliuk","title":"DevOps CookBook"},{"location":"getting-started/","text":"Getting started CLI TFswitch Change Terraform version in one command. Terraform-docs A utility to generate documentation from Terraform modules. Kubectl Kubernetes command-line tool. Kubens Switch between namespaces in one command. Kubectx Switch between clusters in one command. helm-diff is a Helm plugin giving your a preview of what a helm upgrade would change. kube-capasity CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster. aws-sso-util It helps to you to login in several SSO accounts by single command. aws-sso-cred-restore pulls the credentials for specific aws profile as environment variables ( AWS_ACCESS_KEY_ID , etc.). tldr is simplified and community-driven man pages. fzf It's an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc. regctl allows copy docker images with all platforms between two container registries. Terminal tools Homebrew A package manager. Zsh A shell. Oh-My-Zsh Makes your zsh prettier. Oh-My-Zsh Plugins ZSH Plugins. git aws zsh-autosuggestions zsh-syntax-highlighting terraform kubectl helm colored-man-pages Powerlevel10k A theme for oh-my-zsh . fig Expands terminal functionality. tmux is a terminal multiplexer. It lets you switch easily between several programs in one terminal. pbcopy Fast copy the content from the file to the clipboard. Desktop VSCode free code editor with a lot of extensions available. Find out more about the useful extensions. Lens Visual application to control Kubernetes cluster. Sublime Text Cross-platform source code editor. Notion Project management and note-taking software. Colima is the alternative to a Docker Desktop what usually overloads the operating system. Flameshot Powerful, yet simple to use open-source screenshot software. CleanShot X is the best screenshot and screen recording app for Mac with a built-in annotation tool, Cloud uploading, scrolling capture, and a lot more. Useful sites JsonFormatter The JSON Formatter & Validator beautifies and debugs JSON data with advanced formatting and validation algorithms. Base64 Decoding and encoding base64 data. Diagrams Professional diagramming tool.","title":"\ud83d\udc4b Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#cli","text":"TFswitch Change Terraform version in one command. Terraform-docs A utility to generate documentation from Terraform modules. Kubectl Kubernetes command-line tool. Kubens Switch between namespaces in one command. Kubectx Switch between clusters in one command. helm-diff is a Helm plugin giving your a preview of what a helm upgrade would change. kube-capasity CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster. aws-sso-util It helps to you to login in several SSO accounts by single command. aws-sso-cred-restore pulls the credentials for specific aws profile as environment variables ( AWS_ACCESS_KEY_ID , etc.). tldr is simplified and community-driven man pages. fzf It's an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc. regctl allows copy docker images with all platforms between two container registries.","title":"CLI"},{"location":"getting-started/#terminal-tools","text":"Homebrew A package manager. Zsh A shell. Oh-My-Zsh Makes your zsh prettier. Oh-My-Zsh Plugins ZSH Plugins. git aws zsh-autosuggestions zsh-syntax-highlighting terraform kubectl helm colored-man-pages Powerlevel10k A theme for oh-my-zsh . fig Expands terminal functionality. tmux is a terminal multiplexer. It lets you switch easily between several programs in one terminal. pbcopy Fast copy the content from the file to the clipboard.","title":"Terminal tools"},{"location":"getting-started/#desktop","text":"VSCode free code editor with a lot of extensions available. Find out more about the useful extensions. Lens Visual application to control Kubernetes cluster. Sublime Text Cross-platform source code editor. Notion Project management and note-taking software. Colima is the alternative to a Docker Desktop what usually overloads the operating system. Flameshot Powerful, yet simple to use open-source screenshot software. CleanShot X is the best screenshot and screen recording app for Mac with a built-in annotation tool, Cloud uploading, scrolling capture, and a lot more.","title":"Desktop"},{"location":"getting-started/#useful-sites","text":"JsonFormatter The JSON Formatter & Validator beautifies and debugs JSON data with advanced formatting and validation algorithms. Base64 Decoding and encoding base64 data. Diagrams Professional diagramming tool.","title":"Useful sites"},{"location":"applications/cleanshot/","text":"CleanShot CleanShot X is the best screenshot and screen recording app for Mac with a built-in annotation tool, Cloud uploading, scrolling capture, and a lot more. NOTE: It is not free How to install From site https://cleanshot.com/pricing How to use All Features","title":"cleanshot"},{"location":"applications/cleanshot/#cleanshot","text":"CleanShot X is the best screenshot and screen recording app for Mac with a built-in annotation tool, Cloud uploading, scrolling capture, and a lot more. NOTE: It is not free","title":"CleanShot"},{"location":"applications/cleanshot/#how-to-install","text":"From site https://cleanshot.com/pricing","title":"How to install"},{"location":"applications/cleanshot/#how-to-use","text":"All Features","title":"How to use"},{"location":"applications/colima/","text":"Colima Colima is a container runtimes on macOS (and Linux) with minimal setup. How to install Brew brew install colima From source You can also install this tool manually from the GitHub How to use Start Colima with defaults colima start For more usage options colima --help colima start --help Or use a config file colima start --edit Installing Buildx ARCH=amd64 # change to 'arm64' for m1 VERSION=v0.8.2 curl -LO https://github.com/docker/buildx/releases/download/${VERSION}/buildx-${VERSION}.darwin-${ARCH} mkdir -p ~/.docker/cli-plugins mv buildx-${VERSION}.darwin-${ARCH} ~/.docker/cli-plugins/docker-buildx chmod +x ~/.docker/cli-plugins/docker-buildx docker buildx version # verify installation Are M1 macs supported? Colima supports and works on M1 macs but not rigorously tested as the author do not currently possess an M1 device. Proof","title":"colima"},{"location":"applications/colima/#colima","text":"Colima is a container runtimes on macOS (and Linux) with minimal setup.","title":"Colima"},{"location":"applications/colima/#how-to-install","text":"Brew brew install colima From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"applications/colima/#how-to-use","text":"Start Colima with defaults colima start For more usage options colima --help colima start --help Or use a config file colima start --edit","title":"How to use"},{"location":"applications/colima/#installing-buildx","text":"ARCH=amd64 # change to 'arm64' for m1 VERSION=v0.8.2 curl -LO https://github.com/docker/buildx/releases/download/${VERSION}/buildx-${VERSION}.darwin-${ARCH} mkdir -p ~/.docker/cli-plugins mv buildx-${VERSION}.darwin-${ARCH} ~/.docker/cli-plugins/docker-buildx chmod +x ~/.docker/cli-plugins/docker-buildx docker buildx version # verify installation","title":"Installing Buildx"},{"location":"applications/colima/#are-m1-macs-supported","text":"Colima supports and works on M1 macs but not rigorously tested as the author do not currently possess an M1 device. Proof","title":"Are M1 macs supported?"},{"location":"applications/flameshot/","text":"Flameshot Flameshot is a powerful yet simple to use screenshot software. How to install Brew brew install --cask flameshot Linux apt install flameshot From site https://flameshot.org/ BTW, Alternative for Mac is CleanShot","title":"flameshot"},{"location":"applications/flameshot/#flameshot","text":"Flameshot is a powerful yet simple to use screenshot software.","title":"Flameshot"},{"location":"applications/flameshot/#how-to-install","text":"Brew brew install --cask flameshot Linux apt install flameshot From site https://flameshot.org/ BTW, Alternative for Mac is CleanShot","title":"How to install"},{"location":"applications/lens/","text":"Lens Lens - The Kubernetes IDE (\"Lens IDE\") is a distribution of the OpenLens repository with Team Lens specific customizations released under a traditional EULA. Lens IDE a standalone application for MacOS, Windows and Linux operating systems. How to install From site k8slens.dev From source You can also install this tool manually from the GitHub","title":"lens"},{"location":"applications/lens/#lens","text":"Lens - The Kubernetes IDE (\"Lens IDE\") is a distribution of the OpenLens repository with Team Lens specific customizations released under a traditional EULA. Lens IDE a standalone application for MacOS, Windows and Linux operating systems.","title":"Lens"},{"location":"applications/lens/#how-to-install","text":"From site k8slens.dev From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"applications/notion/","text":"Notion Notion is a project management and note-taking software. Notion is a software designed to help members of a company or organization coordinate deadlines, objectives, and assignments for the sake of efficiency and productivity. It is free for personal usage How to install From site notion.so","title":"notion"},{"location":"applications/notion/#notion","text":"Notion is a project management and note-taking software. Notion is a software designed to help members of a company or organization coordinate deadlines, objectives, and assignments for the sake of efficiency and productivity. It is free for personal usage","title":"Notion"},{"location":"applications/notion/#how-to-install","text":"From site notion.so","title":"How to install"},{"location":"applications/sublime/","text":"Sublime text Sublime Text is a shareware cross-platform source code editor. It natively supports many programming languages and markup languages. You can expand its functionality with plugins, typically community-built and maintained under free-software licenses. How to install From site sublimetext.com","title":"sublime"},{"location":"applications/sublime/#sublime-text","text":"Sublime Text is a shareware cross-platform source code editor. It natively supports many programming languages and markup languages. You can expand its functionality with plugins, typically community-built and maintained under free-software licenses.","title":"Sublime text"},{"location":"applications/sublime/#how-to-install","text":"From site sublimetext.com","title":"How to install"},{"location":"applications/vscode/","text":"Code We love Visual Studio Code because it: Easy to use Consumes few resources Has a lot of themes and extensions VSCode Extensions DevOps HashiCorp Terraform . Syntax highlighting and autocompletion for Terraform. Terraform . Terraform configuration language support (includes Terragrunt). Docker . Makes it easy to create, manage, and debug containerized applications. Kubernetes . Develop, deploy and debug Kubernetes applications. Yaml . YAML Language Support by Red Hat, with built-in Kubernetes syntax support. Shell ShellCheck .Integrates ShellCheck into VS Code, a linter for Shell scripts. shell-format . shellscript\u3001Dockerfile\u3001properties\u3001gitignore\u3001dotenv\u3001hosts\u3001jvmoptions... DocumentFormat. Markdown Markdown All in One . All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more). Markdown Table . A minimal extension for markdown table. Add features to edit markdown table. Python Pylance . A performant, feature-rich language server for Python. Python IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more. MagicPython . Syntax highlighter for cutting edge Python. autoDocstring - Python Docstring Generator . Generates python docstrings automatically. Common Gremlins tracker for Visual Studio Code . Reveals some characters that can be harmful because they are invisible or looking like legitimate ones. Code Spell Checker . Spelling checker for source code. Bracket Pair Colorizer . [Deprecated] A customizable extension for colorizing matching brackets Indent-Rainbow . A simple extension to make indentation more readable. Trailing Spaces . An extension that allows you to highlight trailing spaces and delete them in a flash! Prettier - Code formatter . Code formatter using prettier. Git Git History . View git log, file history, compare branches or commits. Themes One Dark Pro Dark theme Material Icon Theme . Material Design Icons for Visual Studio Code. More VSCode themes you can find on this site - https://vscodethemes.com","title":"vscode"},{"location":"applications/vscode/#code","text":"We love Visual Studio Code because it: Easy to use Consumes few resources Has a lot of themes and extensions","title":"Code"},{"location":"applications/vscode/#vscode-extensions","text":"","title":"VSCode Extensions"},{"location":"applications/vscode/#devops","text":"HashiCorp Terraform . Syntax highlighting and autocompletion for Terraform. Terraform . Terraform configuration language support (includes Terragrunt). Docker . Makes it easy to create, manage, and debug containerized applications. Kubernetes . Develop, deploy and debug Kubernetes applications. Yaml . YAML Language Support by Red Hat, with built-in Kubernetes syntax support.","title":"DevOps"},{"location":"applications/vscode/#shell","text":"ShellCheck .Integrates ShellCheck into VS Code, a linter for Shell scripts. shell-format . shellscript\u3001Dockerfile\u3001properties\u3001gitignore\u3001dotenv\u3001hosts\u3001jvmoptions... DocumentFormat.","title":"Shell"},{"location":"applications/vscode/#markdown","text":"Markdown All in One . All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more). Markdown Table . A minimal extension for markdown table. Add features to edit markdown table.","title":"Markdown"},{"location":"applications/vscode/#python","text":"Pylance . A performant, feature-rich language server for Python. Python IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more. MagicPython . Syntax highlighter for cutting edge Python. autoDocstring - Python Docstring Generator . Generates python docstrings automatically.","title":"Python"},{"location":"applications/vscode/#common","text":"Gremlins tracker for Visual Studio Code . Reveals some characters that can be harmful because they are invisible or looking like legitimate ones. Code Spell Checker . Spelling checker for source code. Bracket Pair Colorizer . [Deprecated] A customizable extension for colorizing matching brackets Indent-Rainbow . A simple extension to make indentation more readable. Trailing Spaces . An extension that allows you to highlight trailing spaces and delete them in a flash! Prettier - Code formatter . Code formatter using prettier.","title":"Common"},{"location":"applications/vscode/#git","text":"Git History . View git log, file history, compare branches or commits.","title":"Git"},{"location":"applications/vscode/#themes","text":"One Dark Pro Dark theme Material Icon Theme . Material Design Icons for Visual Studio Code. More VSCode themes you can find on this site - https://vscodethemes.com","title":"Themes"},{"location":"cli/","text":"CLI","title":"CLI"},{"location":"cli/#cli","text":"","title":"CLI"},{"location":"cli/aws-sso/","text":"aws-sso-util AWS SSO util is a tool helps you get temporary AWS credentials for all accounts in one fell swoop from AWS SSO. When companies grow, they increase the number of employees, projects, AWS accounts. Sooner or later, they think about how to correctly and easily provide access to their AWS accounts for all team. One option is to use AWS SSO. If you want to get an access to the AWS you need to get temporary credentials from the AWS SSO, and update your ~/.aws/credentials . But what I will tell you is that these credentials are TEMPORARY and you need to copy/paste them for all necessary account a lot of time during the day. capp huh? What If I say that you can get temporary credentials for all account for 8 hours just using 1 command? magic? :) How to install Pip pip3 install aws-sso-util From source You can also install this tool manually from the GitHub How to configure Open ~/.aws/credentials file Remove previous manually copied credentials Open ~/.aws/config file Remove previous manually copied profiles Add new profiles [profile <Name>] region = <Region> output = json sso_start_url = <SSO URL> sso_region = <Region where is SSO was configured> sso_account_id = <Account ID> sso_role_name = <SSO Role name> Example: [profile 124295726813_BOOK-PlatformManagement] region = us-east-1 output = json sso_start_url = https://book.awsapps.com/start sso_region = us-east-1 sso_account_id = 124295726813 sso_role_name = BOOK-PlatformManagement [profile 683725964332_BOOK-PlatformManagement] region = eu-central-1 output = json sso_start_url = https://book.awsapps.com/start sso_region = us-east-1 sso_account_id = 683725964332 sso_role_name = BOOK-PlatformManagement ... sso_start_url You can check in the AWS SSO page sso_role_name Expand the account and look at the role name How to use I would create an alias for ease of use. alias sso='aws-sso-util login' Run sso in your terminal It will open a new page in the browser If you have already logged in to the AWS SSO - you will need just approve the request. Or you need to enter the AWS SSO first and then approve the request. Profit","title":"aws-sso"},{"location":"cli/aws-sso/#aws-sso-util","text":"AWS SSO util is a tool helps you get temporary AWS credentials for all accounts in one fell swoop from AWS SSO. When companies grow, they increase the number of employees, projects, AWS accounts. Sooner or later, they think about how to correctly and easily provide access to their AWS accounts for all team. One option is to use AWS SSO. If you want to get an access to the AWS you need to get temporary credentials from the AWS SSO, and update your ~/.aws/credentials . But what I will tell you is that these credentials are TEMPORARY and you need to copy/paste them for all necessary account a lot of time during the day. capp huh? What If I say that you can get temporary credentials for all account for 8 hours just using 1 command? magic? :)","title":"aws-sso-util"},{"location":"cli/aws-sso/#how-to-install","text":"Pip pip3 install aws-sso-util From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"cli/aws-sso/#how-to-configure","text":"Open ~/.aws/credentials file Remove previous manually copied credentials Open ~/.aws/config file Remove previous manually copied profiles Add new profiles [profile <Name>] region = <Region> output = json sso_start_url = <SSO URL> sso_region = <Region where is SSO was configured> sso_account_id = <Account ID> sso_role_name = <SSO Role name> Example: [profile 124295726813_BOOK-PlatformManagement] region = us-east-1 output = json sso_start_url = https://book.awsapps.com/start sso_region = us-east-1 sso_account_id = 124295726813 sso_role_name = BOOK-PlatformManagement [profile 683725964332_BOOK-PlatformManagement] region = eu-central-1 output = json sso_start_url = https://book.awsapps.com/start sso_region = us-east-1 sso_account_id = 683725964332 sso_role_name = BOOK-PlatformManagement ... sso_start_url You can check in the AWS SSO page sso_role_name Expand the account and look at the role name","title":"How to configure"},{"location":"cli/aws-sso/#how-to-use","text":"I would create an alias for ease of use. alias sso='aws-sso-util login' Run sso in your terminal It will open a new page in the browser If you have already logged in to the AWS SSO - you will need just approve the request. Or you need to enter the AWS SSO first and then approve the request. Profit","title":"How to use"},{"location":"cli/fig/","text":"Fig Fig adds autocomplete to your terminal. As you type, Fig pops up subcommands, options, and contextually relevant arguments in your existing terminal on macOS. How to install Brew brew install --cask fig From site https://fig.io How to use","title":"fig"},{"location":"cli/fig/#fig","text":"Fig adds autocomplete to your terminal. As you type, Fig pops up subcommands, options, and contextually relevant arguments in your existing terminal on macOS.","title":"Fig"},{"location":"cli/fig/#how-to-install","text":"Brew brew install --cask fig From site https://fig.io","title":"How to install"},{"location":"cli/fig/#how-to-use","text":"","title":"How to use"},{"location":"cli/fzf/","text":"FZF fzf is a general-purpose command-line fuzzy finder. It's an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc. How to install Brew brew install fzf # To install useful key bindings and fuzzy completion: $(brew --prefix)/opt/fzf/install Git Alternatively, you can \"git clone\" this repository to any directory and run install script. git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf ~/.fzf/install How to usage fzf will launch interactive finder, read the list from STDIN, and write the selected item to STDOUT. find * -type f | fzf > selected Demo","title":"fzf"},{"location":"cli/fzf/#fzf","text":"fzf is a general-purpose command-line fuzzy finder. It's an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc.","title":"FZF"},{"location":"cli/fzf/#how-to-install","text":"Brew brew install fzf # To install useful key bindings and fuzzy completion: $(brew --prefix)/opt/fzf/install Git Alternatively, you can \"git clone\" this repository to any directory and run install script. git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf ~/.fzf/install","title":"How to install"},{"location":"cli/fzf/#how-to-usage","text":"fzf will launch interactive finder, read the list from STDIN, and write the selected item to STDOUT. find * -type f | fzf > selected","title":"How to usage"},{"location":"cli/fzf/#demo","text":"","title":"Demo"},{"location":"cli/homebrew/","text":"Homebrew Homebrew is package manager for Macs which makes installing lots of different software like Git, Ruby, and Node simpler. You also can install this for Linux systems How to install Linux /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" How to use Example usage: brew search TEXT|/REGEX/ brew info [FORMULA|CASK...] brew install FORMULA|CASK... brew update brew upgrade [FORMULA|CASK...] brew uninstall FORMULA|CASK... brew list [FORMULA|CASK...] Troubleshooting: brew config brew doctor brew install --verbose --debug FORMULA|CASK Contributing: brew create URL [--no-fetch] brew edit [FORMULA|CASK...] Further help: brew commands brew help [COMMAND] man brew https://docs.brew.sh","title":"homebrew"},{"location":"cli/homebrew/#homebrew","text":"Homebrew is package manager for Macs which makes installing lots of different software like Git, Ruby, and Node simpler. You also can install this for Linux systems","title":"Homebrew"},{"location":"cli/homebrew/#how-to-install","text":"Linux /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"","title":"How to install"},{"location":"cli/homebrew/#how-to-use","text":"Example usage: brew search TEXT|/REGEX/ brew info [FORMULA|CASK...] brew install FORMULA|CASK... brew update brew upgrade [FORMULA|CASK...] brew uninstall FORMULA|CASK... brew list [FORMULA|CASK...] Troubleshooting: brew config brew doctor brew install --verbose --debug FORMULA|CASK Contributing: brew create URL [--no-fetch] brew edit [FORMULA|CASK...] Further help: brew commands brew help [COMMAND] man brew https://docs.brew.sh","title":"How to use"},{"location":"cli/oh-my-zsh-plugins/","text":"Oh My Zsh Plugins Oh My Zsh comes bundled with plugins, which allow you to take advantage of functionality of many sorts to your shell just by enabling them. There are a list of plugins that we use: git aws zsh-autosuggestions zsh-syntax-highlighting terraform kubectl helm colored-man-pages How to install Enable a plugin by adding its name to the plugins array in your .zshrc file. Git The git plugin provides many aliases and a few useful functions . To use it, add git to the plugins array in your zshrc file: plugins=(... git) More about plugin AWS This plugin provides completion support for awscli and a few utilities to manage AWS profiles and display them in the prompt. To use it, add aws to the plugins array in your zshrc file. plugins=(... aws) More about plugin Zsh-autosuggestions Clone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins) git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Add the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc): plugins=(... zsh-autosuggestions) Start a new terminal session. More about plugin Zsh-syntax-highlighting Clone this repository in oh-my-zsh's plugins directory: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 2.Activate the plugin in ~/.zshrc: plugins=(... zsh-syntax-highlighting) Start a new terminal session. More about plugin Terraform Plugin for Terraform, a tool from Hashicorp for managing infrastructure safely and efficiently. It adds completion for terraform , as well as aliases and a prompt function. To use it, add terraform to the plugins array of your ~/.zshrc file: plugins=(... terraform) More about plugin Kubectl This plugin adds completion for the Kubernetes cluster manager , as well as some aliases for common kubectl commands. To use it, add kubectl to the plugins array in your zshrc file: plugins=(... kubectl) More about plugin Colored-man-pages This plugin adds colors to man pages. To use it, add colored-man-pages to the plugins array in your zshrc file: plugins=(... colored-man-pages) It will also automatically colorize man pages displayed by dman or debman , from debian-goodies . You can also try to color other pages by prefixing the respective command with colored : colored git help clone More about plugin More plugins you can find in the official GitHub page.","title":"plugins"},{"location":"cli/oh-my-zsh-plugins/#oh-my-zsh-plugins","text":"Oh My Zsh comes bundled with plugins, which allow you to take advantage of functionality of many sorts to your shell just by enabling them. There are a list of plugins that we use: git aws zsh-autosuggestions zsh-syntax-highlighting terraform kubectl helm colored-man-pages","title":"Oh My Zsh Plugins"},{"location":"cli/oh-my-zsh-plugins/#how-to-install","text":"Enable a plugin by adding its name to the plugins array in your .zshrc file.","title":"How to install"},{"location":"cli/oh-my-zsh-plugins/#git","text":"The git plugin provides many aliases and a few useful functions . To use it, add git to the plugins array in your zshrc file: plugins=(... git) More about plugin","title":"Git"},{"location":"cli/oh-my-zsh-plugins/#aws","text":"This plugin provides completion support for awscli and a few utilities to manage AWS profiles and display them in the prompt. To use it, add aws to the plugins array in your zshrc file. plugins=(... aws) More about plugin","title":"AWS"},{"location":"cli/oh-my-zsh-plugins/#zsh-autosuggestions","text":"Clone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins) git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Add the plugin to the list of plugins for Oh My Zsh to load (inside ~/.zshrc): plugins=(... zsh-autosuggestions) Start a new terminal session. More about plugin","title":"Zsh-autosuggestions"},{"location":"cli/oh-my-zsh-plugins/#zsh-syntax-highlighting","text":"Clone this repository in oh-my-zsh's plugins directory: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 2.Activate the plugin in ~/.zshrc: plugins=(... zsh-syntax-highlighting) Start a new terminal session. More about plugin","title":"Zsh-syntax-highlighting"},{"location":"cli/oh-my-zsh-plugins/#terraform","text":"Plugin for Terraform, a tool from Hashicorp for managing infrastructure safely and efficiently. It adds completion for terraform , as well as aliases and a prompt function. To use it, add terraform to the plugins array of your ~/.zshrc file: plugins=(... terraform) More about plugin","title":"Terraform"},{"location":"cli/oh-my-zsh-plugins/#kubectl","text":"This plugin adds completion for the Kubernetes cluster manager , as well as some aliases for common kubectl commands. To use it, add kubectl to the plugins array in your zshrc file: plugins=(... kubectl) More about plugin","title":"Kubectl"},{"location":"cli/oh-my-zsh-plugins/#colored-man-pages","text":"This plugin adds colors to man pages. To use it, add colored-man-pages to the plugins array in your zshrc file: plugins=(... colored-man-pages) It will also automatically colorize man pages displayed by dman or debman , from debian-goodies . You can also try to color other pages by prefixing the respective command with colored : colored git help clone More about plugin More plugins you can find in the official GitHub page.","title":"Colored-man-pages"},{"location":"cli/oh-my-zsh/","text":"Oh My Zsh Oh-my-zsh is used to help efficiently manage and configure the ZSH shell. It comes packed with functions, themes, and plugins to improve the default ZSH shell. Although other ZSH frameworks help manage the ZSH configuration, oh-my-zsh is the most popular and easy to configure. How to install Linux sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Themes Among all features in OH-MY-ZSH, I love the set of themes that comes in a bundle with the installation. It visually improves my terminal look and feel. Themes are installed under /home/<user>/.oh-my-zsh/themes/ . $ ls /home/tecmint/.oh-my-zsh/themes/ By default robbyrussell is the theme that gets loaded. To change the theme modify the parameter ZSH_THEME=<THEME-NAME> under the .zshrc file. vi nano ~/.zshrc You have to source ( source ~/.zshrc ) the file for changes to be effective. $ source ~/.zshrc Plugins There are tons of plugins that are supported by OH-MY-ZSH . Setting up a plugin is quite easy. All you have to do is get the plugin package and add the plugin name in the plugins parameter on the .zshrc file. By default, git is the only plugin that is enabled after installation. Now I will add two more plugins ZSH-autosuggestions and ZSH-Syntax-highlighting by cloning the packages. $ git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions $ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting To make plugins effective all you have to do is edit the .zhsrc file, add the plugin name in plugins=() with a space between each plugin name. $ vim ~/.zshrc Now source ( source ~/.zshrc ) file for changes to be effective. Now you can see from the screenshot the auto-suggestion feature is enabled and it remembers the command I used previously and suggests based on it. Useful articles Installing OH-MY-ZSH in Ubuntu Linux Oh My Zsh + PowerLevel10k = \ud83d\ude0e terminal","title":"oh-my-zsh"},{"location":"cli/oh-my-zsh/#oh-my-zsh","text":"Oh-my-zsh is used to help efficiently manage and configure the ZSH shell. It comes packed with functions, themes, and plugins to improve the default ZSH shell. Although other ZSH frameworks help manage the ZSH configuration, oh-my-zsh is the most popular and easy to configure.","title":"Oh My Zsh"},{"location":"cli/oh-my-zsh/#how-to-install","text":"Linux sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"","title":"How to install"},{"location":"cli/oh-my-zsh/#themes","text":"Among all features in OH-MY-ZSH, I love the set of themes that comes in a bundle with the installation. It visually improves my terminal look and feel. Themes are installed under /home/<user>/.oh-my-zsh/themes/ . $ ls /home/tecmint/.oh-my-zsh/themes/ By default robbyrussell is the theme that gets loaded. To change the theme modify the parameter ZSH_THEME=<THEME-NAME> under the .zshrc file. vi nano ~/.zshrc You have to source ( source ~/.zshrc ) the file for changes to be effective. $ source ~/.zshrc","title":"Themes"},{"location":"cli/oh-my-zsh/#plugins","text":"There are tons of plugins that are supported by OH-MY-ZSH . Setting up a plugin is quite easy. All you have to do is get the plugin package and add the plugin name in the plugins parameter on the .zshrc file. By default, git is the only plugin that is enabled after installation. Now I will add two more plugins ZSH-autosuggestions and ZSH-Syntax-highlighting by cloning the packages. $ git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions $ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting To make plugins effective all you have to do is edit the .zhsrc file, add the plugin name in plugins=() with a space between each plugin name. $ vim ~/.zshrc Now source ( source ~/.zshrc ) file for changes to be effective. Now you can see from the screenshot the auto-suggestion feature is enabled and it remembers the command I used previously and suggests based on it.","title":"Plugins"},{"location":"cli/oh-my-zsh/#useful-articles","text":"Installing OH-MY-ZSH in Ubuntu Linux Oh My Zsh + PowerLevel10k = \ud83d\ude0e terminal","title":"Useful articles"},{"location":"cli/pbcopy/","text":"Pbcopy This tool helps you to copy all the content from the file without highlighting a piece of text and click on CTRL+SHITF+C It is easy, fast, and cool. How to install Already installed in your system! How to use This will copy all the content within a file. $ cat myfile.txt | pbcopy","title":"pbcopy"},{"location":"cli/pbcopy/#pbcopy","text":"This tool helps you to copy all the content from the file without highlighting a piece of text and click on CTRL+SHITF+C It is easy, fast, and cool.","title":"Pbcopy"},{"location":"cli/pbcopy/#how-to-install","text":"Already installed in your system!","title":"How to install"},{"location":"cli/pbcopy/#how-to-use","text":"This will copy all the content within a file. $ cat myfile.txt | pbcopy","title":"How to use"},{"location":"cli/powerlevel10k/","text":"Powerlevel10k Powerlevel10k is a theme for Zsh. It emphasizes speed, flexibility and out-of-the-box experience. How to install Clone GitHub repository $ git clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k Change the value of ZSH_THEME to following in ~/.zshrc file ZSH_THEME=\"powerlevel10k/powerlevel10k\" Restart your zsh $ zsh It will start configuration of PowerLevel10k. Just select the right options you need and complete the setup Useful articles Oh My Zsh + PowerLevel10k = \ud83d\ude0e terminal","title":"powerlevel10k"},{"location":"cli/powerlevel10k/#powerlevel10k","text":"Powerlevel10k is a theme for Zsh. It emphasizes speed, flexibility and out-of-the-box experience.","title":"Powerlevel10k"},{"location":"cli/powerlevel10k/#how-to-install","text":"Clone GitHub repository $ git clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k Change the value of ZSH_THEME to following in ~/.zshrc file ZSH_THEME=\"powerlevel10k/powerlevel10k\" Restart your zsh $ zsh It will start configuration of PowerLevel10k. Just select the right options you need and complete the setup","title":"How to install"},{"location":"cli/powerlevel10k/#useful-articles","text":"Oh My Zsh + PowerLevel10k = \ud83d\ude0e terminal","title":"Useful articles"},{"location":"cli/regctl/","text":"Regctl Client interface for the registry API. This includes regctl for a command line interface to manage registries. How to install From Binaries Binaries are available on the releases page . The latest release can be downloaded using curl (adjust \"regctl\" and \"linux-amd64\" for the desired command and your own platform): curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 > regctl chmod 755 regctl mv regctl /usr/local/bin/ How to use Login to your ECR ( or another registry ) Execute command regctl image copy FROMIMAGE:TAG TOIMAGE:TAG Example: regctl image copy istio/pilot:1.12.1 public.ecr.aws/q4wf41am/project-public:pilot-1.12.1 Features Provides a client interface to interacting with registries. Images may be inspected without pulling the layers, allowing quick access to the image manifest and configuration. Tags may be listed for a repository. Repositories may be listed from a registry (if supported). Copying an image only pulls layers when needed, allowing images to be quickly retagged or promoted across repositories. Multi-platform images are supported, allowing all platforms to be copied between registries. Digest tags used by projects like sigstore/cosign are supported, allowing signature, attestation, and SBOM metadata to be copied with the image. Digests may be queried for a tag without pulling the manifest. Rate limits may be queried from the registry without pulling an image (useful for Docker Hub). Images may be imported and exported to both OCI and Docker formatted tar files. OCI Layout is supported for copying images to and from a local directory. Delete APIs have been provided for tags, manifests, and blobs (the tag deletion will only delete a single tag even if multiple tags point to the same digest). Registry logins are imported from docker when available Self signed, insecure, and http-only registries are all supported. Requests will retry and fall back to chunked uploads when network issues are encountered.","title":"regctl"},{"location":"cli/regctl/#regctl","text":"Client interface for the registry API. This includes regctl for a command line interface to manage registries.","title":"Regctl"},{"location":"cli/regctl/#how-to-install","text":"From Binaries Binaries are available on the releases page . The latest release can be downloaded using curl (adjust \"regctl\" and \"linux-amd64\" for the desired command and your own platform): curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 > regctl chmod 755 regctl mv regctl /usr/local/bin/","title":"How to install"},{"location":"cli/regctl/#how-to-use","text":"Login to your ECR ( or another registry ) Execute command regctl image copy FROMIMAGE:TAG TOIMAGE:TAG Example: regctl image copy istio/pilot:1.12.1 public.ecr.aws/q4wf41am/project-public:pilot-1.12.1","title":"How to use"},{"location":"cli/regctl/#features","text":"Provides a client interface to interacting with registries. Images may be inspected without pulling the layers, allowing quick access to the image manifest and configuration. Tags may be listed for a repository. Repositories may be listed from a registry (if supported). Copying an image only pulls layers when needed, allowing images to be quickly retagged or promoted across repositories. Multi-platform images are supported, allowing all platforms to be copied between registries. Digest tags used by projects like sigstore/cosign are supported, allowing signature, attestation, and SBOM metadata to be copied with the image. Digests may be queried for a tag without pulling the manifest. Rate limits may be queried from the registry without pulling an image (useful for Docker Hub). Images may be imported and exported to both OCI and Docker formatted tar files. OCI Layout is supported for copying images to and from a local directory. Delete APIs have been provided for tags, manifests, and blobs (the tag deletion will only delete a single tag even if multiple tags point to the same digest). Registry logins are imported from docker when available Self signed, insecure, and http-only registries are all supported. Requests will retry and fall back to chunked uploads when network issues are encountered.","title":"Features"},{"location":"cli/sso-restore/","text":"aws-sso-cred-restore AWS SSO cred restore is a simple script to make it easier to use AWS Single Sign On credentials with tools that don't understand the sso entries in an AWS profile. Let's imagine: You work with Terraform. Your company uses AWS SSO, and you use aws-sso-util to easily get temporary credentials for all accounts. Your terraform modules located in the private s3 bucket You make terraform init and got Error Failed to download module It means that terraform trying to find aws_access_key_id and aws_secret_access_key in the ~/.aws/credentials file based on your profile but can't due to aws-sso-util won't add these credentials to this file. You can use aws-sso-cred-restore to solve this problem. It will get temporary credentials and set them to ~/.aws/credentials How to install Pip pip3 install aws-sso-cred-restore From source You can also install this tool manually from the GitHub How to use Connect to the SSO through aws-sso-util Set right AWS profile for your terraform where your private modules located through asp asp 124295726813_BOOK-PlatformManagement Run aws-sso-cred-restore aws-sso-cred-restore --profile 124295726813_BOOK-PlatformManagement NOTE: If you open the ~/.aws/credentials file, you will find the exported credentials. [124295726813_BOOK-PlatformManagement] aws_access_key_id = ABSDF2A34ESVEJSRU aws_secret_access_key = JX/+iQqwquIhjwZ9ADi6rW9w2PqOTV864VQChzvR aws_session_token = IQoJb3JpZ2luX2VjEPf//////////wEaCXVzLWVhc3QtMSJHMEUCIQDa... Run terraform init","title":"sso-restore"},{"location":"cli/sso-restore/#aws-sso-cred-restore","text":"AWS SSO cred restore is a simple script to make it easier to use AWS Single Sign On credentials with tools that don't understand the sso entries in an AWS profile. Let's imagine: You work with Terraform. Your company uses AWS SSO, and you use aws-sso-util to easily get temporary credentials for all accounts. Your terraform modules located in the private s3 bucket You make terraform init and got Error Failed to download module It means that terraform trying to find aws_access_key_id and aws_secret_access_key in the ~/.aws/credentials file based on your profile but can't due to aws-sso-util won't add these credentials to this file. You can use aws-sso-cred-restore to solve this problem. It will get temporary credentials and set them to ~/.aws/credentials","title":"aws-sso-cred-restore"},{"location":"cli/sso-restore/#how-to-install","text":"Pip pip3 install aws-sso-cred-restore From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"cli/sso-restore/#how-to-use","text":"Connect to the SSO through aws-sso-util Set right AWS profile for your terraform where your private modules located through asp asp 124295726813_BOOK-PlatformManagement Run aws-sso-cred-restore aws-sso-cred-restore --profile 124295726813_BOOK-PlatformManagement NOTE: If you open the ~/.aws/credentials file, you will find the exported credentials. [124295726813_BOOK-PlatformManagement] aws_access_key_id = ABSDF2A34ESVEJSRU aws_secret_access_key = JX/+iQqwquIhjwZ9ADi6rW9w2PqOTV864VQChzvR aws_session_token = IQoJb3JpZ2luX2VjEPf//////////wEaCXVzLWVhc3QtMSJHMEUCIQDa... Run terraform init","title":"How to use"},{"location":"cli/tldr/","text":"TLDR pages TLDR is a simplified and community-driven man pages The tldr pages are a community effort to simplify the beloved man pages with practical examples. How to install NPM npm install -g tldr How to use","title":"tldr"},{"location":"cli/tldr/#tldr-pages","text":"TLDR is a simplified and community-driven man pages The tldr pages are a community effort to simplify the beloved man pages with practical examples.","title":"TLDR pages"},{"location":"cli/tldr/#how-to-install","text":"NPM npm install -g tldr","title":"How to install"},{"location":"cli/tldr/#how-to-use","text":"","title":"How to use"},{"location":"cli/tmux/","text":"Tmux Tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached. How to install Brew brew install tmux Linux apt install tmux From source You can also install this tool manually from the GitHub How to use Creating Named Tmux Sessions By default, Tmux sessions are named numerically. Named sessions are useful when you run multiple Tmux sessions. To create a new named session, run the tmux command with the following arguments: tmux new -s session_name Detaching from Tmux Session You can detach from the Tmux session and return to your normal shell by typing: Ctrl+b d Re-attaching to Tmux Session To attach to a session first, you need to find the name of the session. To get a list of the currently running sessions type: tmux ls For example, to attach to session 0, you would type: tmux attach-session -t 0 Commands Ctrl+b c Create a new window (with shell) Ctrl+b w Choose window from a list Ctrl+b 0 Switch to window 0 (by number ) Ctrl+b , Rename the current window Ctrl+b % Split current pane horizontally into two panes Ctrl+b \" Split current pane vertically into two panes Ctrl+b o Go to the next pane Ctrl+b ; Toggle between the current and previous pane Ctrl+b x Close the current pane","title":"tmux"},{"location":"cli/tmux/#tmux","text":"Tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached.","title":"Tmux"},{"location":"cli/tmux/#how-to-install","text":"Brew brew install tmux Linux apt install tmux From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"cli/tmux/#how-to-use","text":"","title":"How to use"},{"location":"cli/tmux/#creating-named-tmux-sessions","text":"By default, Tmux sessions are named numerically. Named sessions are useful when you run multiple Tmux sessions. To create a new named session, run the tmux command with the following arguments: tmux new -s session_name","title":"Creating Named Tmux Sessions"},{"location":"cli/tmux/#detaching-from-tmux-session","text":"You can detach from the Tmux session and return to your normal shell by typing: Ctrl+b d","title":"Detaching from Tmux Session"},{"location":"cli/tmux/#re-attaching-to-tmux-session","text":"To attach to a session first, you need to find the name of the session. To get a list of the currently running sessions type: tmux ls For example, to attach to session 0, you would type: tmux attach-session -t 0","title":"Re-attaching to Tmux Session"},{"location":"cli/tmux/#commands","text":"Ctrl+b c Create a new window (with shell) Ctrl+b w Choose window from a list Ctrl+b 0 Switch to window 0 (by number ) Ctrl+b , Rename the current window Ctrl+b % Split current pane horizontally into two panes Ctrl+b \" Split current pane vertically into two panes Ctrl+b o Go to the next pane Ctrl+b ; Toggle between the current and previous pane Ctrl+b x Close the current pane","title":"Commands"},{"location":"cli/zsh/","text":"ZSH Zsh is a shell designed for interactive use, although it is also a powerful scripting language. Zsh is more interactive and customizable than Bash. It adds a right-aligned info box, integration with git and command history, incredible customization, and wraps it all up in a slick interface based on the powerline plugin for vim. How to install Brew brew install zsh chsh -s /usr/local/bin/zsh Linux apt install zsh How to use The first time you launch Zsh, you're asked to choose some configuration options. These can all be changed later, so press 1 to continue. This is the Z Shell configuration function for new users, zsh-newuser-install. (q) Quit and do nothing. (0) Exit, creating the file ~/.zshrc (1) Continue to the main menu. There are four categories of preferences, so just start at the top. The first category lets you choose how many commands are retained in your shell history file. By default, it's set to 1,000 lines. Zsh completion is one of its most exciting features. To keep things simple, consider activating it with its default options until you get used to how it works. Press 1 for default options, 2 to set options manually. Choose Emacs or Vi key bindings. Bash uses Emacs bindings, so you may be used to that already. Finally, you can learn about (and set or unset) some of Zsh's subtle features. For instance, you can stop using the cd command by allowing Zsh to initiate a directory change when you provide a non-executable path with no command. To activate one of these extra options, type the option number and enter s to set it. Try turning on all options to get the full Zsh experience. You can unset them later by editing ~/.zshrc. To complete configuration, press 0. Useful articles A Guide to Zsh Expansion with Examples zsh-lovers - tips, tricks and examples for the Z shell 75 Zsh Commands, Plugins, Aliases and Tools","title":"zsh"},{"location":"cli/zsh/#zsh","text":"Zsh is a shell designed for interactive use, although it is also a powerful scripting language. Zsh is more interactive and customizable than Bash. It adds a right-aligned info box, integration with git and command history, incredible customization, and wraps it all up in a slick interface based on the powerline plugin for vim.","title":"ZSH"},{"location":"cli/zsh/#how-to-install","text":"Brew brew install zsh chsh -s /usr/local/bin/zsh Linux apt install zsh","title":"How to install"},{"location":"cli/zsh/#how-to-use","text":"The first time you launch Zsh, you're asked to choose some configuration options. These can all be changed later, so press 1 to continue. This is the Z Shell configuration function for new users, zsh-newuser-install. (q) Quit and do nothing. (0) Exit, creating the file ~/.zshrc (1) Continue to the main menu. There are four categories of preferences, so just start at the top. The first category lets you choose how many commands are retained in your shell history file. By default, it's set to 1,000 lines. Zsh completion is one of its most exciting features. To keep things simple, consider activating it with its default options until you get used to how it works. Press 1 for default options, 2 to set options manually. Choose Emacs or Vi key bindings. Bash uses Emacs bindings, so you may be used to that already. Finally, you can learn about (and set or unset) some of Zsh's subtle features. For instance, you can stop using the cd command by allowing Zsh to initiate a directory change when you provide a non-executable path with no command. To activate one of these extra options, type the option number and enter s to set it. Try turning on all options to get the full Zsh experience. You can unset them later by editing ~/.zshrc. To complete configuration, press 0.","title":"How to use"},{"location":"cli/zsh/#useful-articles","text":"A Guide to Zsh Expansion with Examples zsh-lovers - tips, tricks and examples for the Z shell 75 Zsh Commands, Plugins, Aliases and Tools","title":"Useful articles"},{"location":"kubernetes/helm-diff/","text":"helm diff Helm diff is a helm plugin that shows a diff explaining what a helm upgrade would change. It works the same way when you make a \"terraform plan\". You see the changes and then, if everything is ok, you apply the changes. This is so useful because there must be a situation where you accidentally delete a very important resource and everything stops working in production. How to install Helm helm plugin install https://github.com/databus23/helm-diff From source You can also install this tool manually from the GitHub How to use The Helm Diff Plugin * Shows a diff explaining what a helm upgrade would change: This fetches the currently deployed version of a release and compares it to a local chart plus values. This can be used visualize what changes a helm upgrade will perform. * Shows a diff explaining what had changed between two revisions: This fetches previously deployed versions of a release and compares them. This can be used visualize what changes were made during revision change. * Shows a diff explaining what a helm rollback would change: This fetches the currently deployed version of a release and compares it to the previously deployed version of the release, that you want to rollback. This can be used visualize what changes a helm rollback will perform. Usage: diff [flags] diff [command] Available Commands: release Shows diff between release's manifests revision Shows diff between revision's manifests rollback Show a diff explaining what a helm rollback could perform upgrade Show a diff explaining what a helm upgrade would change. version Show version of the helm diff plugin Flags: --allow-unreleased enables diffing of releases that are not yet deployed via Helm -a, --api-versions stringArray Kubernetes api versions used for Capabilities.APIVersions --color color output. You can control the value for this flag via HELM_DIFF_COLOR=[true|false]. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not \"dumb\" -C, --context int output NUM lines of context around changes (default -1) --detailed-exitcode return a non-zero exit code when there are changes --devel use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored. --disable-openapi-validation disables rendered templates validation against the Kubernetes OpenAPI Schema --disable-validation disables rendered templates validation against the Kubernetes cluster you are currently pointing to. This is the same validation performed on an install --dry-run disables cluster access and show diff as if it was install. Implies --install, --reset-values, and --disable-validation -h, --help help for diff --include-tests enable the diffing of the helm test hooks --install enables diffing of releases that are not yet deployed via Helm (equivalent to --allow-unreleased, added to match \"helm upgrade --install\" command --kube-version string Kubernetes version used for Capabilities.KubeVersion --kubeconfig string This flag is ignored, to allow passing of this top level flag to helm --no-color remove colors from the output. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not \"dumb\" --no-hooks disable diffing of hooks --normalize-manifests normalize manifests before running diff to exclude style differences from the output --output string Possible values: diff, simple, json, template. When set to \"template\", use the env var HELM_DIFF_TPL to specify the template. (default \"diff\") --post-renderer string the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path --repo string specify the chart repository url to locate the requested chart --reset-values reset the values to the ones built into the chart and merge in any new values --reuse-values reuse the last release's values and merge in any new values. If '--reset-values' is specified, this is ignored --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --show-secrets do not redact secret values in the output --strip-trailing-cr strip trailing carriage return on input --suppress stringArray allows suppression of the values listed in the diff output -q, --suppress-secrets suppress secrets in the output --three-way-merge use three-way-merge to compute patch and generate diff output -f, --values valueFiles specify values in a YAML file (can specify multiple) (default []) --version string specify the exact chart version to use. If this is not specified, the latest version is used Additional help topics: diff Use \"diff [command] --help\" for more information about a command.","title":"helm-diff"},{"location":"kubernetes/helm-diff/#helm-diff","text":"Helm diff is a helm plugin that shows a diff explaining what a helm upgrade would change. It works the same way when you make a \"terraform plan\". You see the changes and then, if everything is ok, you apply the changes. This is so useful because there must be a situation where you accidentally delete a very important resource and everything stops working in production.","title":"helm diff"},{"location":"kubernetes/helm-diff/#how-to-install","text":"Helm helm plugin install https://github.com/databus23/helm-diff From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"kubernetes/helm-diff/#how-to-use","text":"The Helm Diff Plugin * Shows a diff explaining what a helm upgrade would change: This fetches the currently deployed version of a release and compares it to a local chart plus values. This can be used visualize what changes a helm upgrade will perform. * Shows a diff explaining what had changed between two revisions: This fetches previously deployed versions of a release and compares them. This can be used visualize what changes were made during revision change. * Shows a diff explaining what a helm rollback would change: This fetches the currently deployed version of a release and compares it to the previously deployed version of the release, that you want to rollback. This can be used visualize what changes a helm rollback will perform. Usage: diff [flags] diff [command] Available Commands: release Shows diff between release's manifests revision Shows diff between revision's manifests rollback Show a diff explaining what a helm rollback could perform upgrade Show a diff explaining what a helm upgrade would change. version Show version of the helm diff plugin Flags: --allow-unreleased enables diffing of releases that are not yet deployed via Helm -a, --api-versions stringArray Kubernetes api versions used for Capabilities.APIVersions --color color output. You can control the value for this flag via HELM_DIFF_COLOR=[true|false]. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not \"dumb\" -C, --context int output NUM lines of context around changes (default -1) --detailed-exitcode return a non-zero exit code when there are changes --devel use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored. --disable-openapi-validation disables rendered templates validation against the Kubernetes OpenAPI Schema --disable-validation disables rendered templates validation against the Kubernetes cluster you are currently pointing to. This is the same validation performed on an install --dry-run disables cluster access and show diff as if it was install. Implies --install, --reset-values, and --disable-validation -h, --help help for diff --include-tests enable the diffing of the helm test hooks --install enables diffing of releases that are not yet deployed via Helm (equivalent to --allow-unreleased, added to match \"helm upgrade --install\" command --kube-version string Kubernetes version used for Capabilities.KubeVersion --kubeconfig string This flag is ignored, to allow passing of this top level flag to helm --no-color remove colors from the output. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not \"dumb\" --no-hooks disable diffing of hooks --normalize-manifests normalize manifests before running diff to exclude style differences from the output --output string Possible values: diff, simple, json, template. When set to \"template\", use the env var HELM_DIFF_TPL to specify the template. (default \"diff\") --post-renderer string the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path --repo string specify the chart repository url to locate the requested chart --reset-values reset the values to the ones built into the chart and merge in any new values --reuse-values reuse the last release's values and merge in any new values. If '--reset-values' is specified, this is ignored --set stringArray set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --set-file stringArray set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2) --set-string stringArray set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) --show-secrets do not redact secret values in the output --strip-trailing-cr strip trailing carriage return on input --suppress stringArray allows suppression of the values listed in the diff output -q, --suppress-secrets suppress secrets in the output --three-way-merge use three-way-merge to compute patch and generate diff output -f, --values valueFiles specify values in a YAML file (can specify multiple) (default []) --version string specify the exact chart version to use. If this is not specified, the latest version is used Additional help topics: diff Use \"diff [command] --help\" for more information about a command.","title":"How to use"},{"location":"kubernetes/kube-capasity/","text":"kube-capacity Kube capacity is a simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster. How to install Brew brew tap robscott/tap brew install robscott/tap/kube-capacity From source You can also install this tool manually from the GitHub How to use kube-capacity NODE CPU REQUESTS CPU LIMITS MEMORY REQUESTS MEMORY LIMITS * 560m (28%) 130m (7%) 572Mi (9%) 770Mi (13%) example-node-1 220m (22%) 10m (1%) 192Mi (6%) 360Mi (12%) example-node-2 340m (34%) 120m (12%) 380Mi (13%) 410Mi (14%) kube-capacity --pods NODE NAMESPACE POD CPU REQUESTS CPU LIMITS MEMORY REQUESTS MEMORY LIMITS * * * 560m (28%) 780m (38%) 572Mi (9%) 770Mi (13%) example-node-1 * * 220m (22%) 320m (32%) 192Mi (6%) 360Mi (12%) example-node-1 kube-system metrics-server-lwc6z 100m (10%) 200m (20%) 100Mi (3%) 200Mi (7%) example-node-1 kube-system coredns-7b5bcb98f8 120m (12%) 120m (12%) 92Mi (3%) 160Mi (5%) example-node-2 * * 340m (34%) 460m (46%) 380Mi (13%) 410Mi (14%) example-node-2 kube-system kube-proxy-3ki7 200m (20%) 280m (28%) 210Mi (7%) 210Mi (7%) example-node-2 tiller tiller-deploy 140m (14%) 180m (18%) 170Mi (5%) 200Mi (7%)","title":"kube-capasity"},{"location":"kubernetes/kube-capasity/#kube-capacity","text":"Kube capacity is a simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster.","title":"kube-capacity"},{"location":"kubernetes/kube-capasity/#how-to-install","text":"Brew brew tap robscott/tap brew install robscott/tap/kube-capacity From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"kubernetes/kube-capasity/#how-to-use","text":"kube-capacity NODE CPU REQUESTS CPU LIMITS MEMORY REQUESTS MEMORY LIMITS * 560m (28%) 130m (7%) 572Mi (9%) 770Mi (13%) example-node-1 220m (22%) 10m (1%) 192Mi (6%) 360Mi (12%) example-node-2 340m (34%) 120m (12%) 380Mi (13%) 410Mi (14%) kube-capacity --pods NODE NAMESPACE POD CPU REQUESTS CPU LIMITS MEMORY REQUESTS MEMORY LIMITS * * * 560m (28%) 780m (38%) 572Mi (9%) 770Mi (13%) example-node-1 * * 220m (22%) 320m (32%) 192Mi (6%) 360Mi (12%) example-node-1 kube-system metrics-server-lwc6z 100m (10%) 200m (20%) 100Mi (3%) 200Mi (7%) example-node-1 kube-system coredns-7b5bcb98f8 120m (12%) 120m (12%) 92Mi (3%) 160Mi (5%) example-node-2 * * 340m (34%) 460m (46%) 380Mi (13%) 410Mi (14%) example-node-2 kube-system kube-proxy-3ki7 200m (20%) 280m (28%) 210Mi (7%) 210Mi (7%) example-node-2 tiller tiller-deploy 140m (14%) 180m (18%) 170Mi (5%) 200Mi (7%)","title":"How to use"},{"location":"kubernetes/kubectl/","text":"kubectl Kubectl is a Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs. How to install Brew brew install kubectl Linux curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl How to use Use the following syntax to run kubectl commands from your terminal window: kubectl [command] [TYPE] [NAME] [flags] where command , TYPE , NAME , and flags are: command : Specifies the operation that you want to perform on one or more resources, for example create, get, describe, delete. TYPE : Specifies the resource type. Resource types are case-insensitive and you can specify the singular, plural, or abbreviated forms. For example, the following commands produce the same output: kubectl get pod pod1 kubectl get pods pod1 kubectl get po pod1 NAME : Specifies the name of the resource. Names are case-sensitive. If the name is omitted, details for all resources are displayed, for example kubectl get pods . flags : Specifies optional flags. For example, you can use the -s or --server flags to specify the address and port of the Kubernetes API server.","title":"kubectl"},{"location":"kubernetes/kubectl/#kubectl","text":"Kubectl is a Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs.","title":"kubectl"},{"location":"kubernetes/kubectl/#how-to-install","text":"Brew brew install kubectl Linux curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl","title":"How to install"},{"location":"kubernetes/kubectl/#how-to-use","text":"Use the following syntax to run kubectl commands from your terminal window: kubectl [command] [TYPE] [NAME] [flags] where command , TYPE , NAME , and flags are: command : Specifies the operation that you want to perform on one or more resources, for example create, get, describe, delete. TYPE : Specifies the resource type. Resource types are case-insensitive and you can specify the singular, plural, or abbreviated forms. For example, the following commands produce the same output: kubectl get pod pod1 kubectl get pods pod1 kubectl get po pod1 NAME : Specifies the name of the resource. Names are case-sensitive. If the name is omitted, details for all resources are displayed, for example kubectl get pods . flags : Specifies optional flags. For example, you can use the -s or --server flags to specify the address and port of the Kubernetes API server.","title":"How to use"},{"location":"kubernetes/kubectx/","text":"kubectx Kubectx is a tool to switch between contexts (clusters) on kubectl faster. How to install Linux sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx From source You can also install this tool manually from the GitHub How to use Switch to another cluster that's in kubeconfig $ kubectx minikube Switched to context \"minikube\". Switch back to previous cluster $ kubectx - Switched to context \"oregon\". Create an alias for the context $ kubectx dublin=gke_ahmetb_europe-west1-b_dublin Context \"dublin\" set. Aliased \"gke_ahmetb_europe-west1-b_dublin\" as \"dublin\".","title":"kubectx"},{"location":"kubernetes/kubectx/#kubectx","text":"Kubectx is a tool to switch between contexts (clusters) on kubectl faster.","title":"kubectx"},{"location":"kubernetes/kubectx/#how-to-install","text":"Linux sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"kubernetes/kubectx/#how-to-use","text":"Switch to another cluster that's in kubeconfig $ kubectx minikube Switched to context \"minikube\". Switch back to previous cluster $ kubectx - Switched to context \"oregon\". Create an alias for the context $ kubectx dublin=gke_ahmetb_europe-west1-b_dublin Context \"dublin\" set. Aliased \"gke_ahmetb_europe-west1-b_dublin\" as \"dublin\".","title":"How to use"},{"location":"kubernetes/kubens/","text":"kubens Kubens is a tool to switch between Kubernetes namespaces (and configure them for kubectl) easily. How to install Linux sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens NOTE: kubens located in the same repo as kubectx From source You can also install this tool manually from the GitHub How to use Change the active namespace on kubectl $ kubens kube-system Context \"test\" set. Active namespace is \"kube-system\". Go back to the previous namespace $ kubens - Context \"test\" set. Active namespace is \"default\".","title":"kubens"},{"location":"kubernetes/kubens/#kubens","text":"Kubens is a tool to switch between Kubernetes namespaces (and configure them for kubectl) easily.","title":"kubens"},{"location":"kubernetes/kubens/#how-to-install","text":"Linux sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens NOTE: kubens located in the same repo as kubectx From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"kubernetes/kubens/#how-to-use","text":"Change the active namespace on kubectl $ kubens kube-system Context \"test\" set. Active namespace is \"kube-system\". Go back to the previous namespace $ kubens - Context \"test\" set. Active namespace is \"default\".","title":"How to use"},{"location":"terraform/terraform-docs/","text":"Terraform docs Terraform docs is utility to generate documentation from Terraform modules in various output formats. This tool generate documentation based on variables.tf , outputs.tf and provider information. Therefore, please fill in the values of the variables \"description\", \"type\" and \"default\" completely. How to install Brew brew install terraform-docs Linux curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz tar -xzf terraform-docs.tar.gz chmod +x terraform-docs mv terraform-docs /usr/local/bin/terraform-docs From source You can also install this tool manually from the GitHub How to use To run and generate documentation into README within a directory: terraform-docs markdown table --output-file README.md --output-mode inject /path/to/module Check [ output ] configuration for more details and examples. To run and generate documentation into console with sort terraform-docs markdown . --sort=true --sort-by required","title":"terraform-docs"},{"location":"terraform/terraform-docs/#terraform-docs","text":"Terraform docs is utility to generate documentation from Terraform modules in various output formats. This tool generate documentation based on variables.tf , outputs.tf and provider information. Therefore, please fill in the values of the variables \"description\", \"type\" and \"default\" completely.","title":"Terraform docs"},{"location":"terraform/terraform-docs/#how-to-install","text":"Brew brew install terraform-docs Linux curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz tar -xzf terraform-docs.tar.gz chmod +x terraform-docs mv terraform-docs /usr/local/bin/terraform-docs From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"terraform/terraform-docs/#how-to-use","text":"To run and generate documentation into README within a directory: terraform-docs markdown table --output-file README.md --output-mode inject /path/to/module Check [ output ] configuration for more details and examples. To run and generate documentation into console with sort terraform-docs markdown . --sort=true --sort-by required","title":"How to use"},{"location":"terraform/tfswitch/","text":"TFswitch The tfswitch command line tool lets you switch between different versions of terraform. It is so useful when you are working on different projects and need to switch between different terraform versions. Now you forget about downloading/updating terraform versions manually. How to install Brew brew install warrensbox/tap/tfswitch Linux curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash From source You can also install this tool manually from the GitHub How to use Use dropdown menu to select version You can switch between different versions of terraform by typing the command tfswitch on your terminal. Select the version of terraform you require by using the up and down arrow. Hit Enter to select the desired version. Supply version on command line You can also supply the desired version as an argument on the command line. For example, tfswitch 0.10.5 for version 0.10.5 of terraform. Hit Enter to switch. See all versions including beta, alpha and release candidates Display all versions including beta, alpha and release candidates(rc). For example, tfswitch -l or tfswitch --list-all to see all versions. Hit Enter to select the desired version.","title":"tfswitch"},{"location":"terraform/tfswitch/#tfswitch","text":"The tfswitch command line tool lets you switch between different versions of terraform. It is so useful when you are working on different projects and need to switch between different terraform versions. Now you forget about downloading/updating terraform versions manually.","title":"TFswitch"},{"location":"terraform/tfswitch/#how-to-install","text":"Brew brew install warrensbox/tap/tfswitch Linux curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash From source You can also install this tool manually from the GitHub","title":"How to install"},{"location":"terraform/tfswitch/#how-to-use","text":"Use dropdown menu to select version You can switch between different versions of terraform by typing the command tfswitch on your terminal. Select the version of terraform you require by using the up and down arrow. Hit Enter to select the desired version. Supply version on command line You can also supply the desired version as an argument on the command line. For example, tfswitch 0.10.5 for version 0.10.5 of terraform. Hit Enter to switch. See all versions including beta, alpha and release candidates Display all versions including beta, alpha and release candidates(rc). For example, tfswitch -l or tfswitch --list-all to see all versions. Hit Enter to select the desired version.","title":"How to use"}]}